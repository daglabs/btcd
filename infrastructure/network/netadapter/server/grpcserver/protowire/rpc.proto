// RPC-related types. Request messages, response messages, and dependant types.
//
// Clients are expected to build RequestMessages and wrap them in KaspadMessage. (see messages.proto)
//
// Having received a KaspadMessage, the RPC server will respond with a ResponseMessage (likewise
// wrapped in a KaspadMessage) respective to the original RequestMessage.
//
syntax = "proto3";
package protowire;

option go_package = "github.com/kaspanet/kaspad/protowire";

import "p2p.proto";

message RPCError{
  string message = 1;
}

message GetCurrentNetworkRequestMessage{
}

message GetCurrentNetworkResponseMessage{
  string currentNetwork = 1;
  RPCError error = 1000;
}

message SubmitBlockRequestMessage{
  BlockMessage block = 1;
}

message SubmitBlockResponseMessage{
  RPCError error = 1000;
}

message GetBlockTemplateRequestMessage{
  string payAddress = 1;
}

message GetBlockTemplateResponseMessage{
  BlockMessage blockMessage = 1;
  bool isSynced = 2;

  RPCError error = 1000;
}

message NotifyBlockAddedRequestMessage{
}

message NotifyBlockAddedResponseMessage{
  RPCError error = 1000;
}

message BlockAddedNotificationMessage{
  BlockMessage block = 1;
}

message GetPeerAddressesRequestMessage{
}

message GetPeerAddressesResponseMessage{
  repeated GetPeerAddressesKnownAddressMessage addresses = 1;
  repeated GetPeerAddressesKnownAddressMessage bannedAddresses = 2;
  RPCError error = 1000;
}

message GetPeerAddressesKnownAddressMessage {
  string Addr = 1;
}

message GetSelectedTipHashRequestMessage{
}

message GetSelectedTipHashResponseMessage{
  string selectedTipHash = 1;
  RPCError error = 1000;
}

// mempool entries start
message MempoolEntry{
  uint64 fee = 1;
  TransactionVerboseData transactionVerboseData = 2;
}

message GetMempoolEntryRequestMessage{
  string txId = 1;
}

message GetMempoolEntryResponseMessage{
  MempoolEntry entry = 1;

  RPCError error = 1000;
}

message GetMempoolEntriesRequestMessage{
}

message GetMempoolEntriesResponseMessage{
  repeated MempoolEntry entries = 1;

  RPCError error = 1000;
}
// mempool entries end

message GetConnectedPeerInfoRequestMessage{
}

message GetConnectedPeerInfoResponseMessage{
  repeated GetConnectedPeerInfoMessage infos = 1;
  RPCError error = 1000;
}

message GetConnectedPeerInfoMessage{
  string id = 1;
  string address = 2;
  int64 lastPingDuration = 3;
  bool isOutbound = 6;
  int64 timeOffset = 7;
  string userAgent = 8;
  uint32 advertisedProtocolVersion = 9;
  int64 timeConnected = 10;
}

message AddPeerRequestMessage{
  string address = 1;
  bool isPermanent = 2;
}

message AddPeerResponseMessage{
  RPCError error = 1000;
}

message SubmitTransactionRequestMessage{
  RpcTransaction transaction = 1;
}

message SubmitTransactionResponseMessage{
  string transactionId = 1;

  RPCError error = 1000;
}

message NotifyVirtualSelectedParentChainChangedRequestMessage{
}

message NotifyVirtualSelectedParentChainChangedResponseMessage{
  RPCError error = 1000;
}

message VirtualSelectedParentChainChangedNotificationMessage{
  repeated string removedChainBlockHashes = 1;
  repeated ChainBlock addedChainBlocks = 2;
}

message ChainBlock{
  string hash = 1;
  repeated AcceptedBlock acceptedBlocks = 2;
}

message AcceptedBlock{
  string hash = 1;
  repeated string acceptedTransactionIds = 2;
}

message GetBlockRequestMessage{
  string hash = 1;
  string subnetworkId = 2;
  bool includeTransactionVerboseData = 3;
}

message GetBlockResponseMessage{
  string blockHash = 1;
  BlockVerboseData blockVerboseData = 2;
  RPCError error = 1000;
}

message BlockVerboseData{
  string hash = 1;
  uint32 version = 2;
  string versionHex = 3;
  string hashMerkleRoot = 4;
  string acceptedIDMerkleRoot = 5;
  string utxoCommitment = 6;
  repeated TransactionVerboseData transactionVerboseData = 7;
  int64 time = 8;
  uint64 nonce = 9;
  string bits = 10;
  double difficulty = 11;
  repeated string parentHashes = 12;
  string selectedParentHash = 13;
  repeated string transactionIDs = 14;
  bool isHeaderOnly = 15;
  uint64 blueScore = 16;
}

message TransactionVerboseData{
  string txId = 1;
  string hash = 2;
  uint64 size = 3;
  uint32 version = 4;
  uint64 lockTime = 5;
  string subnetworkId = 6;
  uint64 gas = 7;
  string payloadHash = 8;
  string payload = 9;
  repeated TransactionVerboseInput transactionVerboseInputs = 10;
  repeated TransactionVerboseOutput transactionVerboseOutputs = 11;
  string blockHash = 12;
  uint64 time = 13;
  uint64 blockTime = 14;
}

message TransactionVerboseInput{
  string txId = 1;
  uint32 outputIndex = 2;
  ScriptSig scriptSig = 3;
  uint64 sequence = 4;
}

message ScriptSig{
  string asm = 1;
  string hex = 2;
}

message TransactionVerboseOutput{
  uint64 value = 1;
  uint32 index = 2;
  ScriptPublicKeyResult scriptPublicKey = 3;
}

message ScriptPublicKeyResult{
  string asm = 1;
  string hex = 2;
  string type = 3;
  string address = 4;
}

message GetSubnetworkRequestMessage{
  string subnetworkId = 1;
}

message GetSubnetworkResponseMessage{
  uint64 gasLimit = 1;
  RPCError error = 1000;
}

message GetVirtualSelectedParentChainFromBlockRequestMessage{
  string startHash = 1;
}

message GetVirtualSelectedParentChainFromBlockResponseMessage{
  repeated string removedChainBlockHashes = 1;
  repeated ChainBlock addedChainBlocks = 2;

  RPCError error = 1000;
}

message GetBlocksRequestMessage{
  string lowHash = 1;
  bool includeBlockHexes = 2;
  bool includeBlockVerboseData = 3;
  bool includeTransactionVerboseData = 4;
}

message GetBlocksResponseMessage{
  repeated string blockHashes = 1;
  repeated string blockHexes = 2;
  repeated BlockVerboseData blockVerboseData = 3;
  RPCError error = 1000;
}

message GetBlockCountRequestMessage{
}

message GetBlockCountResponseMessage{
  uint64 blockCount = 1;
  uint64 headerCount = 2;
  RPCError error = 1000;
}

message GetBlockDagInfoRequestMessage{
}

message GetBlockDagInfoResponseMessage{
  string networkName = 1;
  uint64 blockCount = 2;
  uint64 headerCount = 3;
  repeated string tipHashes = 4;
  double difficulty = 5;
  int64 pastMedianTime = 6;
  repeated string virtualParentHashes = 7;
  RPCError error = 1000;
}

message ResolveFinalityConflictRequestMessage{
  string finalityBlockHash = 1;
}

message ResolveFinalityConflictResponseMessage{
  RPCError error = 1000;
}

message NotifyFinalityConflictsRequestMessage{
}

message NotifyFinalityConflictsResponseMessage{
  RPCError error = 1000;
}

message FinalityConflictNotificationMessage{
  string violatingBlockHash = 1;
}

message FinalityConflictResolvedNotificationMessage{
  string finalityBlockHash = 1;
}

message ShutDownRequestMessage{
}

message ShutDownResponseMessage{
  RPCError error = 1000;
}

message GetHeadersRequestMessage{
  string startHash = 1;
  uint64 limit = 2;
  bool isAscending = 3;
}

message GetHeadersResponseMessage{
  repeated string headers = 1;
  RPCError error = 1000;
}

message NotifyUtxosChangedRequestMessage {
  repeated string addresses = 1;
}

message NotifyUtxosChangedResponseMessage {
  RPCError error = 1000;
}

message UtxosChangedNotificationMessage {
  repeated UtxosByAddressesEntry added = 1;
  repeated UtxosByAddressesEntry removed = 2;
}

message UtxosByAddressesEntry {
  string address = 1;
  RpcOutpoint outpoint = 2;
  RpcUtxoEntry utxoEntry = 3;
}

message RpcTransaction {
  uint32 version = 1;
  repeated RpcTransactionInput inputs = 2;
  repeated RpcTransactionOutput outputs = 3;
  uint64 lockTime = 4;
  string subnetworkId = 5;
  uint64 gas = 6;
  string payloadHash = 7;
  string payload = 8;
}

message RpcTransactionInput {
  RpcOutpoint previousOutpoint = 1;
  string signatureScript = 2;
  uint64 sequence = 3;
}

message RpcScriptPublicKey {
  uint32 version = 1;
  string scriptPublicKey = 2;
}

message RpcTransactionOutput {
  uint64 amount = 1;
  RpcScriptPublicKey scriptPublicKey = 2;
}

message RpcOutpoint {
  string transactionId = 1;
  uint32 index = 2;
}

message RpcUtxoEntry {
  uint64 amount = 1;
  RpcScriptPublicKey scriptPublicKey = 2;
  uint64 blockBlueScore = 3;
  bool isCoinbase = 4;
}

message GetUtxosByAddressesRequestMessage {
  repeated string addresses = 1;
}

message GetUtxosByAddressesResponseMessage {
  repeated UtxosByAddressesEntry entries = 1;

  RPCError error = 1000;
}

message GetVirtualSelectedParentBlueScoreRequestMessage {
}

message GetVirtualSelectedParentBlueScoreResponseMessage {
  uint64 blueScore = 1;

  RPCError error = 1000;
}

message NotifyVirtualSelectedParentBlueScoreChangedRequestMessage {
}

message NotifyVirtualSelectedParentBlueScoreChangedResponseMessage {
  RPCError error = 1000;
}

message VirtualSelectedParentBlueScoreChangedNotificationMessage {
  uint64 virtualSelectedParentBlueScore = 1;
}
