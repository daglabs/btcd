syntax = "proto3";
package serialization;

option go_package = "github.com/kaspanet/kaspad/serialization";

message DbBlock {
  DbBlockHeader header = 1;
  repeated DbTransaction transactions = 2;
}

message DbBlockHeader {
  int32 version = 1;
  repeated bytes parentHashes = 2;
  bytes hashMerkleRoot = 3;
  bytes acceptedIDMerkleRoot = 4;
  bytes utxoCommitment = 5;
  int64 timeInMilliseconds = 6;
  uint32 bits = 7;
  uint64 nonce = 8;
}

message DbTransaction {
  int32 version = 1;
  repeated DbTransactionInput inputs = 2;
  repeated DbTransactionOutput outputs = 3;
  uint64 lockTime = 4;
  bytes subnetworkID = 5;
  uint64 gas = 6;
  bytes payloadHash = 7;
  bytes payload = 8;
}

message DbTransactionInput {
  DbOutpoint previousOutpoint = 1;
  bytes signatureScript = 2;
  uint64 sequence = 3;
}

message DbOutpoint {
  bytes transactionID = 1;
  uint32 index = 2;
}

message DbTransactionOutput {
  uint64 value = 1;
  bytes scriptPublicKey = 2;
}

message DbAcceptanceData {
  repeated DbBlockAcceptanceData blockAcceptanceData = 1;
}

message DbBlockAcceptanceData {
  repeated DbTransactionAcceptanceData transactionAcceptanceData = 1;
}

message DbTransactionAcceptanceData {
  DbTransaction transaction = 1;
  uint64 fee = 2;
  bool isAccepted = 3;
}

message DbBlockRelations {
  repeated bytes parents = 1;
  repeated bytes children = 2;
}

message DbBlockStatus {
  uint32 status = 1;
}

message DbBlockGhostdagData {
  uint64 blueScore = 1;
  bytes selectedParent = 2;
  repeated bytes mergeSetBlues = 3;
  repeated bytes mergeSetReds = 4;
  repeated DbBluesAnticoneSizes bluesAnticoneSizes = 5;
}

message DbBluesAnticoneSizes {
  bytes blueHash = 1;
  uint32 anticoneSize = 2;
}

message DbMultiset {
  bytes multiset = 1;
}

message DbPruningPoint {
  bytes hash = 1;
}

message DbUtxoSet {
  repeated DbUtxoCollectionItem items = 1;
}

message DbUtxoCollectionItem {
  DbOutpoint outpoint = 1;
  DbUtxoEntry utxoEntry = 2;
}

message DbUtxoEntry {
  uint64 amount = 1;
  bytes scriptPublicKey = 2;
  uint64 blockBlueScore = 3;
  bool isCoinbase = 4;
}

message DbReachabilityData {
  DbReachabilityTreeNode treeNode = 1;
  DbFutureCoveringTreeNodeSet futureCoveringSet = 2;
}

message DbReachabilityTreeNode {
  repeated bytes children = 1;
  bytes parent = 2;
  DbReachabilityInterval interval = 3;
}

message DbReachabilityInterval {
  uint64 start = 1;
  uint64 end = 2;
}

message DbFutureCoveringTreeNodeSet {
  repeated bytes blockHash = 1;
}

message DbReachabilityReindexRoot {
  bytes blockHash = 1;
}

message DbUtxoDiff {
  repeated DbUtxoCollectionItem toAdd = 1;
  repeated DbUtxoCollectionItem toRemove = 2;
}

message DbUtxoDiffChild {
  bytes blockHash = 1;
}
