package indexers

import (
	"bytes"
	"math"
	"reflect"
	"testing"
	"time"

	"github.com/daglabs/btcd/blockdag"
	"github.com/daglabs/btcd/dagconfig"
	"github.com/daglabs/btcd/dagconfig/daghash"
	"github.com/daglabs/btcd/util"
	"github.com/daglabs/btcd/wire"
)

func TestTxIndexConnectBlock(t *testing.T) {
	blocks := make(map[daghash.Hash]*util.Block)
	processBlock := func(t *testing.T, dag *blockdag.BlockDAG, msgBlock *wire.MsgBlock, blockName string) {
		block := util.NewBlock(msgBlock)
		blocks[*block.Hash()] = block
		isOrphan, err := dag.ProcessBlock(block, blockdag.BFNone)
		if err != nil {
			t.Fatalf("TestTxIndexConnectBlock: dag.ProcessBlock got unexpected error for block %v: %v", blockName, err)
		}
		if isOrphan {
			t.Fatalf("TestTxIndexConnectBlock: block %v was unexpectedly orphan", blockName)
		}
	}

	txIndex := NewTxIndex()
	indexManager := NewManager([]Indexer{txIndex})

	params := dagconfig.SimNetParams
	params.CoinbaseMaturity = 1
	params.K = 1

	config := blockdag.Config{
		IndexManager: indexManager,
		DAGParams:    &params,
	}

	dag, teardown, err := blockdag.DAGSetup("TestTxIndexConnectBlock", config)
	if err != nil {
		t.Fatalf("TestTxIndexConnectBlock: Failed to setup DAG instance: %v", err)
	}
	if teardown != nil {
		defer teardown()
	}

	processBlock(t, dag, &block1, "1")
	processBlock(t, dag, &block2, "2")
	processBlock(t, dag, &block3, "3")

	block3TxHash := block3Tx.TxHash()
	block3TxNewAcceptedBlock, err := txIndex.BlockThatAcceptedTx(dag, &block3TxHash)
	if err != nil {
		t.Errorf("TestTxIndexConnectBlock: TxAcceptedInBlock: %v", err)
	}
	block3Hash := block3.Header.BlockHash()
	if !block3TxNewAcceptedBlock.IsEqual(&block3Hash) {
		t.Errorf("TestTxIndexConnectBlock: block3Tx should've "+
			"been accepted in block %v but instead got accepted in block %v", block3Hash, block3TxNewAcceptedBlock)
	}

	processBlock(t, dag, &block3A, "3A")
	processBlock(t, dag, &block4, "4")
	processBlock(t, dag, &block5, "5")

	block3TxAcceptedBlock, err := txIndex.BlockThatAcceptedTx(dag, &block3TxHash)
	if err != nil {
		t.Errorf("TestTxIndexConnectBlock: TxAcceptedInBlock: %v", err)
	}
	block3AHash := block3A.Header.BlockHash()
	if !block3TxAcceptedBlock.IsEqual(&block3AHash) {
		t.Errorf("TestTxIndexConnectBlock: block3Tx should've "+
			"been accepted in block %v but instead got accepted in block %v", block3AHash, block3TxAcceptedBlock)
	}

	region, err := txIndex.TxFirstBlockRegion(&block3TxHash)
	if err != nil {
		t.Fatalf("TestTxIndexConnectBlock: no block region was found for block3Tx")
	}
	regionBlock, ok := blocks[*region.Hash]
	if !ok {
		t.Fatalf("TestTxIndexConnectBlock: couldn't find block with hash %v", region.Hash)
	}

	regionBlockBytes, err := regionBlock.Bytes()
	if err != nil {
		t.Fatalf("TestTxIndexConnectBlock: Couldn't serialize block to bytes")
	}
	block3TxInBlock := regionBlockBytes[region.Offset : region.Offset+region.Len]

	block3TxBuf := bytes.NewBuffer(make([]byte, 0, block3Tx.SerializeSize()))
	block3Tx.BtcEncode(block3TxBuf, 0)
	blockTxBytes := block3TxBuf.Bytes()

	if !reflect.DeepEqual(blockTxBytes, block3TxInBlock) {
		t.Errorf("TestTxIndexConnectBlock: the block region that was in the bucket doesn't match block3Tx")
	}

}

var block1 = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version: 1,
		ParentHashes: []daghash.Hash{
			[32]byte{ // Make go vet happy.
				0x34, 0x16, 0x17, 0x85, 0x5d, 0xf7, 0x79, 0xde,
				0xdc, 0x37, 0xf0, 0x57, 0x93, 0x9d, 0x6f, 0x22,
				0xe5, 0xff, 0xa0, 0x3e, 0xc7, 0x3e, 0x50, 0xf5,
				0xa1, 0x2a, 0x0a, 0x2e, 0x48, 0x05, 0xc2, 0x47,
			},
		},
		MerkleRoot: daghash.Hash([32]byte{ // Make go vet happy.
			0x6c, 0x56, 0xa7, 0x7d, 0xfa, 0x18, 0x89, 0xdc,
			0x20, 0x60, 0x3f, 0x51, 0x32, 0xa8, 0xdc, 0x47,
			0x5f, 0x43, 0xb7, 0xe8, 0xae, 0x24, 0x22, 0x34,
			0x64, 0x91, 0xe7, 0xd5, 0xac, 0xc0, 0xed, 0x88,
		}),
		Timestamp: time.Unix(0x5c238b71, 0),
		Bits:      0x207fffff,
		Nonce:     0x00000000,
	},
	Transactions: []*wire.MsgTx{
		{
			Version: 1,
			TxIn: []*wire.TxIn{
				{
					PreviousOutPoint: wire.OutPoint{
						Hash:  daghash.Hash{},
						Index: 0xffffffff,
					},
					SignatureScript: []byte{
						0x51, 0x00, 0x0b, 0x2f, 0x50, 0x32, 0x53, 0x48,
						0x2f, 0x62, 0x74, 0x63, 0x64, 0x2f,
					},
					Sequence: math.MaxUint64,
				},
			},
			TxOut: []*wire.TxOut{
				{
					Value: 5000000000,
					PkScript: []byte{
						0x76, 0xa9, 0x14, 0x3d, 0xee, 0x47, 0x71, 0x6e,
						0x3c, 0xfa, 0x57, 0xdf, 0x45, 0x11, 0x34, 0x73,
						0xa6, 0x31, 0x2e, 0xbe, 0xae, 0xf3, 0x11, 0x88,
						0xac,
					},
				},
			},
			LockTime:     0,
			SubNetworkID: wire.DAGcoinSubNetwork,
		},
	},
}

var block2 = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version: 1,
		ParentHashes: []daghash.Hash{
			[32]byte{ // Make go vet happy.
				0x69, 0xe9, 0xd1, 0xa2, 0xd0, 0x5f, 0x35, 0x39,
				0x6b, 0xa7, 0x1d, 0xeb, 0x97, 0x33, 0x7f, 0xcf,
				0xa1, 0xa8, 0xc5, 0x1f, 0x31, 0x82, 0x09, 0x62,
				0x79, 0xb3, 0xf9, 0xd6, 0x66, 0x3f, 0xd7, 0x45,
			},
		},
		MerkleRoot: daghash.Hash([32]byte{ // Make go vet happy.
			0x29, 0xdc, 0xa7, 0x2b, 0x14, 0xfb, 0x5b, 0xe4,
			0x3c, 0x7c, 0x91, 0x3c, 0x54, 0x7c, 0xbe, 0x20,
			0x98, 0xe8, 0xc6, 0x01, 0x65, 0x59, 0x02, 0xa5,
			0xa2, 0xf5, 0xf1, 0x9f, 0x3b, 0x3f, 0x28, 0x3c,
		}),
		Timestamp: time.Unix(0x5c238b72, 0),
		Bits:      0x207fffff,
		Nonce:     0x2000000000000001,
	},
	Transactions: []*wire.MsgTx{
		{
			Version: 1,
			TxIn: []*wire.TxIn{
				{
					PreviousOutPoint: wire.OutPoint{
						Hash:  daghash.Hash{},
						Index: 0xffffffff,
					},
					SignatureScript: []byte{
						0x52, 0x00, 0x0b, 0x2f, 0x50, 0x32, 0x53, 0x48,
						0x2f, 0x62, 0x74, 0x63, 0x64, 0x2f,
					},
					Sequence: math.MaxUint64,
				},
			},
			TxOut: []*wire.TxOut{
				{
					Value: 5000000000,
					PkScript: []byte{
						0x76, 0xa9, 0x14, 0x3d, 0xee, 0x47, 0x71, 0x6e,
						0x3c, 0xfa, 0x57, 0xdf, 0x45, 0x11, 0x34, 0x73,
						0xa6, 0x31, 0x2e, 0xbe, 0xae, 0xf3, 0x11, 0x88,
						0xac,
					},
				},
			},
			LockTime:     0,
			SubNetworkID: wire.DAGcoinSubNetwork,
		},
		{
			Version: 1,
			TxIn: []*wire.TxIn{
				{
					PreviousOutPoint: wire.OutPoint{
						Hash: daghash.Hash{
							0x6c, 0x56, 0xa7, 0x7d, 0xfa, 0x18, 0x89, 0xdc,
							0x20, 0x60, 0x3f, 0x51, 0x32, 0xa8, 0xdc, 0x47,
							0x5f, 0x43, 0xb7, 0xe8, 0xae, 0x24, 0x22, 0x34,
							0x64, 0x91, 0xe7, 0xd5, 0xac, 0xc0, 0xed, 0x88,
						},
						Index: 0,
					},
					SignatureScript: []byte{
						0x46, 0x30, 0x43, 0x02, 0x1f, 0x56, 0x0a, 0xfa,
						0x84, 0xc7, 0x80, 0xe1, 0x56, 0xe0, 0xec, 0x18,
						0xe7, 0xd7, 0x02, 0x87, 0x1f, 0x22, 0x62, 0xda,
						0xfa, 0x33, 0x82, 0xfc, 0x1d, 0x01, 0x7a, 0x0e,
						0xa5, 0x5f, 0x4e, 0xce, 0x02, 0x20, 0x6d, 0x1f,
						0xaf, 0xca, 0x91, 0x33, 0x8d, 0xfb, 0xb7, 0xa2,
						0x40, 0xf9, 0x4f, 0x3c, 0x04, 0xc9, 0x47, 0x29,
						0x6a, 0x7f, 0x45, 0x62, 0x0a, 0x2a, 0x7d, 0x93,
						0x7b, 0xe2, 0xc9, 0xba, 0x15, 0xb3, 0x01, 0x21,
						0x02, 0xa6, 0x73, 0x63, 0x8c, 0xb9, 0x58, 0x7c,
						0xb6, 0x8e, 0xa0, 0x8d, 0xbe, 0xf6, 0x85, 0xc6,
						0xf2, 0xd2, 0xa7, 0x51, 0xa8, 0xb3, 0xc6, 0xf2,
						0xa7, 0xe9, 0xa4, 0x99, 0x9e, 0x6e, 0x4b, 0xfa,
						0xf5,
					},
					Sequence: math.MaxUint64,
				},
			},
			TxOut: []*wire.TxOut{
				{
					Value: 5000000000,
					PkScript: []byte{
						0x76, 0xa9, 0x14, 0x3d, 0xee, 0x47, 0x71, 0x6e,
						0x3c, 0xfa, 0x57, 0xdf, 0x45, 0x11, 0x34, 0x73,
						0xa6, 0x31, 0x2e, 0xbe, 0xae, 0xf3, 0x11, 0x88,
						0xac,
					},
				},
			},
			LockTime:     0,
			SubNetworkID: wire.DAGcoinSubNetwork,
		},
	},
}

var block3Tx = &wire.MsgTx{
	Version: 1,
	TxIn: []*wire.TxIn{
		{
			PreviousOutPoint: wire.OutPoint{
				Hash: daghash.Hash{
					0x99, 0x30, 0x0c, 0x6e, 0xad, 0x5c, 0x9c, 0xcf,
					0xfc, 0xcb, 0x62, 0xfd, 0x39, 0xe3, 0xc1, 0x7e,
					0x87, 0x17, 0xec, 0x9e, 0x7b, 0xc7, 0x81, 0xe0,
					0x8f, 0x15, 0x85, 0xcb, 0x6d, 0x54, 0x74, 0x3e,
				},
				Index: 0,
			},
			SignatureScript: []byte{
				0x48, 0x30, 0x45, 0x02, 0x21, 0x00, 0x91, 0xa3,
				0xb4, 0x99, 0x57, 0xb2, 0x53, 0x2f, 0x7f, 0xaf,
				0xb6, 0x4d, 0x9d, 0x7b, 0x1b, 0xa2, 0x41, 0x03,
				0x1a, 0xe5, 0xfd, 0x4d, 0xe1, 0x5a, 0x7e, 0x9f,
				0xe3, 0xdd, 0x44, 0xb8, 0x62, 0x13, 0x02, 0x20,
				0x7a, 0xba, 0x9a, 0xe6, 0xa5, 0x81, 0x43, 0xb9,
				0x05, 0x66, 0xc1, 0xa3, 0x79, 0xad, 0xf0, 0xf4,
				0xb9, 0xfe, 0x28, 0x13, 0x35, 0xd6, 0x84, 0x95,
				0x08, 0xd0, 0xaa, 0x1d, 0xb7, 0x5b, 0x88, 0x4c,
				0x01, 0x21, 0x02, 0xa6, 0x73, 0x63, 0x8c, 0xb9,
				0x58, 0x7c, 0xb6, 0x8e, 0xa0, 0x8d, 0xbe, 0xf6,
				0x85, 0xc6, 0xf2, 0xd2, 0xa7, 0x51, 0xa8, 0xb3,
				0xc6, 0xf2, 0xa7, 0xe9, 0xa4, 0x99, 0x9e, 0x6e,
				0x4b, 0xfa, 0xf5,
			},
			Sequence: math.MaxUint64,
		},
	},
	TxOut: []*wire.TxOut{
		{
			Value: 5000000000,
			PkScript: []byte{
				0x76, 0xa9, 0x14, 0x3d, 0xee, 0x47, 0x71, 0x6e,
				0x3c, 0xfa, 0x57, 0xdf, 0x45, 0x11, 0x34, 0x73,
				0xa6, 0x31, 0x2e, 0xbe, 0xae, 0xf3, 0x11, 0x88,
				0xac,
			},
		},
	},
	LockTime:     0,
	SubNetworkID: wire.DAGcoinSubNetwork,
}

var block3 = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version: 1,
		ParentHashes: []daghash.Hash{
			[32]byte{ // Make go vet happy.
				0x96, 0x2d, 0x1d, 0x2b, 0xc2, 0xf9, 0x30, 0x43,
				0x88, 0x23, 0xdb, 0x75, 0x73, 0x43, 0xb8, 0xb6,
				0x76, 0x34, 0x42, 0x55, 0x8f, 0x44, 0x2a, 0x6f,
				0xb1, 0xac, 0x7e, 0x9b, 0x1f, 0x9f, 0x00, 0x19,
			},
		},
		MerkleRoot: daghash.Hash([32]byte{ // Make go vet happy.
			0x58, 0xbd, 0x06, 0x58, 0x0a, 0xab, 0x32, 0x10,
			0x97, 0x5c, 0xc6, 0x97, 0xb0, 0xde, 0xb9, 0xe2,
			0xa6, 0x21, 0x67, 0xe5, 0x2f, 0xa3, 0xc5, 0xb2,
			0xba, 0x8f, 0xd3, 0xc7, 0x4c, 0x18, 0x87, 0xc5,
		}),
		Timestamp: time.Unix(0x5c238b73, 0),
		Bits:      0x207fffff,
		Nonce:     0xdffffffffffffff9,
	},
	Transactions: []*wire.MsgTx{
		{
			Version: 1,
			TxIn: []*wire.TxIn{
				{
					PreviousOutPoint: wire.OutPoint{
						Hash:  daghash.Hash{},
						Index: 0xffffffff,
					},
					SignatureScript: []byte{
						0x53, 0x00, 0x0b, 0x2f, 0x50, 0x32, 0x53, 0x48,
						0x2f, 0x62, 0x74, 0x63, 0x64, 0x2f,
					},
					Sequence: math.MaxUint64,
				},
			},
			TxOut: []*wire.TxOut{
				{
					Value: 5000000000,
					PkScript: []byte{
						0x76, 0xa9, 0x14, 0x3d, 0xee, 0x47, 0x71, 0x6e,
						0x3c, 0xfa, 0x57, 0xdf, 0x45, 0x11, 0x34, 0x73,
						0xa6, 0x31, 0x2e, 0xbe, 0xae, 0xf3, 0x11, 0x88,
						0xac,
					},
				},
			},
			LockTime:     0,
			SubNetworkID: wire.DAGcoinSubNetwork,
		},
		block3Tx,
	},
}

var block3A = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version: 1,
		ParentHashes: []daghash.Hash{
			[32]byte{ // Make go vet happy.
				0x96, 0x2d, 0x1d, 0x2b, 0xc2, 0xf9, 0x30, 0x43,
				0x88, 0x23, 0xdb, 0x75, 0x73, 0x43, 0xb8, 0xb6,
				0x76, 0x34, 0x42, 0x55, 0x8f, 0x44, 0x2a, 0x6f,
				0xb1, 0xac, 0x7e, 0x9b, 0x1f, 0x9f, 0x00, 0x19,
			},
		},
		MerkleRoot: daghash.Hash([32]byte{ // Make go vet happy.
			0xd3, 0x95, 0x8a, 0x56, 0xfe, 0x89, 0x86, 0x9f,
			0x47, 0x80, 0x9b, 0xea, 0x51, 0xec, 0x2b, 0x7d,
			0x76, 0xd5, 0x15, 0xde, 0x98, 0xad, 0x5d, 0x6e,
			0x79, 0xf5, 0xa4, 0x9b, 0x1b, 0x0c, 0xfa, 0x9b,
		}),
		Timestamp: time.Unix(0x5c238b73, 0),
		Bits:      0x207fffff,
		Nonce:     0xdffffffffffffff9,
	},
	Transactions: []*wire.MsgTx{
		{
			Version: 1,
			TxIn: []*wire.TxIn{
				{
					PreviousOutPoint: wire.OutPoint{
						Hash:  daghash.Hash{},
						Index: 0xffffffff,
					},
					SignatureScript: []byte{
						0x53, 0x51, 0x0b, 0x2f, 0x50, 0x32, 0x53, 0x48,
						0x2f, 0x62, 0x74, 0x63, 0x64, 0x2f,
					},
					Sequence: math.MaxUint64,
				},
			},
			TxOut: []*wire.TxOut{
				{
					Value: 5000000000,
					PkScript: []byte{
						0x76, 0xa9, 0x14, 0x3d, 0xee, 0x47, 0x71, 0x6e,
						0x3c, 0xfa, 0x57, 0xdf, 0x45, 0x11, 0x34, 0x73,
						0xa6, 0x31, 0x2e, 0xbe, 0xae, 0xf3, 0x11, 0x88,
						0xac,
					},
				},
			},
			LockTime:     0,
			SubNetworkID: wire.DAGcoinSubNetwork,
		},
		block3Tx,
	},
}

var block4 = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version: 1,
		ParentHashes: []daghash.Hash{
			[32]byte{ // Make go vet happy.
				0x4c, 0xfb, 0xcd, 0x2b, 0x0f, 0x3c, 0xa3, 0x61,
				0x82, 0xce, 0x34, 0x39, 0x79, 0x0d, 0x22, 0x3b,
				0x94, 0xdc, 0x7b, 0x66, 0xf8, 0x62, 0xc7, 0xb2,
				0xd0, 0xfc, 0xb4, 0xf3, 0xc0, 0x7c, 0xa3, 0x63,
			},
		},
		MerkleRoot: daghash.Hash([32]byte{ // Make go vet happy.
			0xe0, 0x32, 0x30, 0x4d, 0x53, 0x1d, 0xd4, 0xe0,
			0xe1, 0xc7, 0x20, 0xf8, 0x28, 0x86, 0x45, 0x9f,
			0x5d, 0x42, 0x1f, 0x2a, 0xb5, 0xcc, 0x62, 0x7f,
			0xe7, 0xf2, 0xdd, 0x22, 0x64, 0x7c, 0xc4, 0x66,
		}),
		Timestamp: time.Unix(0x5c238b74, 0),
		Bits:      0x207fffff,
		Nonce:     0xdffffffffffffffb,
	},
	Transactions: []*wire.MsgTx{
		{
			Version: 1,
			TxIn: []*wire.TxIn{
				{
					PreviousOutPoint: wire.OutPoint{
						Hash:  daghash.Hash{},
						Index: 0xffffffff,
					},
					SignatureScript: []byte{
						0x54, 0x00, 0x0b, 0x2f, 0x50, 0x32, 0x53, 0x48,
						0x2f, 0x62, 0x74, 0x63, 0x64, 0x2f,
					},
					Sequence: math.MaxUint64,
				},
			},
			TxOut: []*wire.TxOut{
				{
					Value: 5000000000,
					PkScript: []byte{
						0x76, 0xa9, 0x14, 0x3d, 0xee, 0x47, 0x71, 0x6e,
						0x3c, 0xfa, 0x57, 0xdf, 0x45, 0x11, 0x34, 0x73,
						0xa6, 0x31, 0x2e, 0xbe, 0xae, 0xf3, 0x11, 0x88,
						0xac,
					},
				},
			},
			LockTime:     0,
			SubNetworkID: wire.DAGcoinSubNetwork,
		},
	},
}

var block5 = wire.MsgBlock{
	Header: wire.BlockHeader{
		Version: 1,
		ParentHashes: []daghash.Hash{
			[32]byte{ // Make go vet happy.
				0x03, 0x28, 0xad, 0x11, 0xe6, 0x8f, 0x48, 0x33,
				0x5c, 0xa8, 0xbb, 0x8c, 0x29, 0xde, 0x43, 0xd5,
				0x70, 0x8b, 0xbd, 0x1e, 0x61, 0x9d, 0xc8, 0x7d,
				0xc5, 0x52, 0x86, 0x26, 0x6b, 0x68, 0xec, 0x1f,
			},
			[32]byte{ // Make go vet happy.
				0xcf, 0xfd, 0x63, 0x11, 0x72, 0xb7, 0xdc, 0x80,
				0x59, 0xd0, 0x35, 0x31, 0xed, 0x03, 0x89, 0x3a,
				0xe9, 0x9b, 0x74, 0xee, 0x86, 0xad, 0x3c, 0x4e,
				0x0b, 0x08, 0x46, 0xaa, 0x39, 0x30, 0xfa, 0x63,
			},
		},
		MerkleRoot: daghash.Hash([32]byte{ // Make go vet happy.
			0x8e, 0xb2, 0xf8, 0x31, 0xec, 0x11, 0xc2, 0x22,
			0xd1, 0x31, 0x47, 0xf0, 0xbb, 0x48, 0x74, 0xce,
			0x4a, 0x39, 0x25, 0x99, 0xa7, 0x1c, 0x8c, 0x83,
			0x98, 0x8d, 0x66, 0xc5, 0x94, 0xa9, 0xf1, 0x50,
		}),
		Timestamp: time.Unix(0x5c238b75, 0),
		Bits:      0x207fffff,
		Nonce:     0xdffffffffffffffa,
	},
	Transactions: []*wire.MsgTx{
		{
			Version: 1,
			TxIn: []*wire.TxIn{
				{
					PreviousOutPoint: wire.OutPoint{
						Hash:  daghash.Hash{},
						Index: 0xffffffff,
					},
					SignatureScript: []byte{
						0x55, 0x00, 0x0b, 0x2f, 0x50, 0x32, 0x53, 0x48,
						0x2f, 0x62, 0x74, 0x63, 0x64, 0x2f,
					},
					Sequence: math.MaxUint64,
				},
			},
			TxOut: []*wire.TxOut{
				{
					Value: 5000000000,
					PkScript: []byte{
						0x76, 0xa9, 0x14, 0x3d, 0xee, 0x47, 0x71, 0x6e,
						0x3c, 0xfa, 0x57, 0xdf, 0x45, 0x11, 0x34, 0x73,
						0xa6, 0x31, 0x2e, 0xbe, 0xae, 0xf3, 0x11, 0x88,
						0xac,
					},
				},
			},
			LockTime:     0,
			SubNetworkID: wire.DAGcoinSubNetwork,
		},
	},
}
