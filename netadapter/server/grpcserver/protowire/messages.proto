syntax = "proto3";
package protowire;

option go_package = "github.com/kaspanet/kaspad/protowire";

message KaspadMessage {
  oneof payload {
    AddressesMessage addresses = 1;
    BlockMessage block = 2;
    TransactionMessage transaction = 3;
    BlockLocatorMessage blockLocator = 4;
    GetAddressesMessage getAddresses = 5;
    GetBlocksMessage getBlocks = 6;
    GetRelayBlocksMessage getRelayBlocks = 7;
    GetSelectedTipMessage getSelectedTip = 8;
    GetTransactionsMessage getTransactions = 9;
    BlockMessage ibdBlock = 10;
    InvRelayBlockMessage invRelayBlock = 11;
    InvTransactionsMessage invTransactions = 12;
    PingMessage ping = 13;
    PongMessage pong = 14;
    SelectedTipMessage selectedTip = 15;
    VerackMessage verack = 16;
    VersionMessage version = 17;
  }
}

// AddressesMessage Start
message AddressesMessage{
  bool includeAllSubnetworks = 1;
  SubnetworkID subnetworkID = 2;
  repeated NetAddress addressList = 3;
}

message NetAddress{
  int64  timestamp = 1;
  uint64 services = 2;
  bytes ip = 3;
  uint32 port = 4;
}

message SubnetworkID{
  bytes bytes = 1;
}
// AddressesMessage End

// GetAddressesMessage start
message GetAddressesMessage{
  bool includeAllSubnetworks = 1;
  SubnetworkID subnetworkID = 2;
}
// GetAddressesMessage end

// TransactionMessage Start
message TransactionMessage{
  int32 version = 1;
  repeated TransactionInput inputs = 2;
  repeated TransactionOutput outputs = 3;
  uint64 lockTime = 4;
  SubnetworkID subnetworkID = 5;
  uint64 gas = 6;
  Hash payloadHash = 7;
  bytes Payload = 8;
}

message TransactionInput{
  Outpoint PreviousOutpoint = 1;
  bytes SignatureScript = 2;
  uint64 Sequence = 3;
}

message Outpoint{
  TransactionID transactionID = 1;
  uint32 index = 2;
}

message TransactionID{
  bytes bytes = 1;
}

message TransactionOutput{
  uint64 value = 1;
  bytes ScriptPubKey = 2;
}
// TransactionMessage End

// BlockMessage Start
message BlockMessage{
  BlockHeader header = 1;
  repeated TransactionMessage transactions = 2;
}

message BlockHeader{
  int32 version = 1;
  repeated Hash parentHashes = 2;
  Hash hashMerkleRoot = 3;
  Hash acceptedIDMerkleRoot = 4;
  Hash utxoCommitment = 5;
  int64 timestamp = 6;
  uint32 bits = 7;
  uint64 nonce = 8;
}

message Hash{
  bytes bytes = 1;
}
// BlockMessage End

// BlockLocatorMessage start
message BlockLocatorMessage{
  repeated Hash hashes = 1;
}
// BlockLocatorMessage end

// GetBlocksMessage start
message GetBlocksMessage{
  Hash lowHash = 1;
  Hash highHash = 2;
}
// GetBlocksMessage end

// GetRelayBlocksMessage start
message GetRelayBlocksMessage{
  repeated Hash hashes = 1;
}
// GetRelayBlocksMessage end

// GetSelectedTipMessage start
message GetSelectedTipMessage{
}
// GetSelectedTipMessage end

// GetTransactionsMessage start
message GetTransactionsMessage{
  repeated TransactionID ids = 1;
}
// GetTransactionsMessage end

// InvRelayBlockMessage start
message InvRelayBlockMessage{
  Hash hash = 1;
}
// InvRelayBlockMessage end

// InvTransactionMessage start
message InvTransactionsMessage{
  repeated TransactionID ids = 1;
}
// InvTransactionMessage end

// PingMessage start
message PingMessage{
  uint64 nonce = 1;
}
// PingMessage end

// PongMessage start
message PongMessage{
  uint64 nonce = 1;
}
// PongMessage end

// SelectedTipMessage start
message SelectedTipMessage{
  Hash selectedTipHash = 1;
}
// SelectedTipMessage end

// VerackMessage start
message VerackMessage{
}
// VerackMessage end

// VersionMessage start
message VersionMessage{
  uint32 protocolVersion = 1;
  uint64 services = 2;
  int64 timestamp = 3;
  NetAddress address = 4;
  bytes id = 5;
  string userAgent = 6;
  Hash selectedTipHash = 7;
  bool disableRelayTx = 8;
  SubnetworkID subnetworkID = 9;
}
// VersionMessage end

service P2P {
  rpc MessageStream (stream KaspadMessage) returns (stream KaspadMessage) {}
}
